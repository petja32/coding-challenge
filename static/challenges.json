{
  "data": [
    {
      "title": "Find Shortest Path in a Maze",
      "description": "Write a function that takes a maze represented as a 2D array and finds the shortest path from the top-left corner to the bottom-right corner. You can move up, down, left, or right, but cannot pass through walls represented by 1s.",
      "test": [
        [
          [0, 0, 0, 0, 0],
          [1, 1, 1, 1, 0],
          [0, 0, 0, 0, 0],
          [0, 1, 1, 1, 1],
          [0, 0, 0, 0, 0]
        ],
        null
      ],
      "expected": 8
    },
    {
      "title": "Implement a LRU Cache",
      "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support get and put operations in O(1) time complexity.",
      "test": [null, null],
      "expected": true
    },
    {
      "title": "Longest Increasing Subsequence",
      "description": "Write a function that finds the length of the longest increasing subsequence of a given array of integers.",
      "test": [[10, 22, 9, 33, 21, 50, 41, 60, 80], null],
      "expected": 6
    },
    {
      "title": "Sudoku Solver",
      "description": "Write a function that solves a Sudoku puzzle. The input is a 9x9 grid with some cells filled with numbers. The solution should satisfy the Sudoku rules.",
      "test": [
        [
          [5, 3, 0, 0, 7, 0, 0, 0, 0],
          [6, 0, 0, 1, 9, 5, 0, 0, 0],
          [0, 9, 8, 0, 0, 0, 0, 6, 0],
          [8, 0, 0, 0, 6, 0, 0, 0, 3],
          [4, 0, 0, 8, 0, 3, 0, 0, 1],
          [7, 0, 0, 0, 2, 0, 0, 0, 6],
          [0, 6, 0, 0, 0, 0, 2, 8, 0],
          [0, 0, 0, 4, 1, 9, 0, 0, 5],
          [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        null
      ],
      "expected": true
    },
    {
      "title": "Implement Trie (Prefix Tree)",
      "description": "Implement a Trie (prefix tree) with insert, search, and startsWith methods.",
      "test": [null, null],
      "expected": true
    },
    {
      "title": "Maximal Square",
      "description": "Write a function that finds the area of the largest square containing only 1's in a binary matrix. The square should be formed by 1's and all the 1's on its border should form a rectangle.",
      "test": [
        [
          [1, 0, 1, 0, 0],
          [1, 0, 1, 1, 1],
          [1, 1, 1, 1, 1],
          [1, 0, 0, 1, 0]
        ],
        null
      ],
      "expected": 4
    },
    {
      "title": "Number of Islands",
      "description": "Write a function that counts the number of islands in a 2D matrix. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.",
      "test": [
        [
          [1, 1, 1, 1, 0],
          [1, 1, 0, 1, 0],
          [1, 1, 0, 0, 0],
          [0, 0, 0, 0, 0]
        ],
        null
      ],
      "expected": 1
    },
    {
      "title": "Minimum Window Substring",
      "description": "Write a function that finds the minimum window in a string that contains all characters of another string. If there is no such window, return an empty string.",
      "test": ["ADOBECODEBANC", "ABC"],
      "expected": "BANC"
    },
    {
      "title": "Word Search",
      "description": "Write a function that determines if a given word exists in a 2D board where each cell can be used only once.",
      "test": [
        [
          ["A", "B", "C", "E"],
          ["S", "F", "C", "S"],
          ["A", "D", "E", "E"]
        ],
        "SEE"
      ],
      "expected": true
    },
    {
      "title": "Alien Dictionary",
      "description": "Write a function that given a list of words in an alien language, returns the order of characters in the language.",
      "test": [["wrt", "wrf", "er", "ett", "rftt"], null],
      "expected": "wertf"
    },
    {
      "title": "Median of Two Sorted Arrays",
      "description": "Write a function that finds the median of the two sorted arrays. The overall run time complexity should be O(log(min(m,n))).",
      "test": [[1, 3], [2], null],
      "expected": 2
    },
    {
      "title": "Trapping Rain Water",
      "description": "Write a function that given an array representing elevation, returns the total amount of water that can be trapped after raining.",
      "test": [[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], null],
      "expected": 6
    },
    {
      "title": "Evaluate Reverse Polish Notation",
      "description": "Write a function that evaluates the value of an arithmetic expression in Reverse Polish Notation (postfix notation).",
      "test": [["2", "1", "+", "3", "*"], null],
      "expected": 9
    },
    {
      "title": "Expression Add Operators",
      "description": "Write a function that adds the necessary operators '+' and '*' to a given string of numbers to make the expression equal to a target value.",
      "test": ["123", 6],
      "expected": ["1*2*3", "1+2+3"]
    },
    {
      "title": "Regular Expression Matching",
      "description": "Implement regular expression matching with support for '.' and '*'.",
      "test": ["mississippi", "mis*is*p*.", null],
      "expected": false
    },
    {
      "title": "Count of Smaller Numbers After Self",
      "description": "Write a function that given an array, counts the number of elements to the right of each element which are smaller than the element itself.",
      "test": [[5, 2, 6, 1], null],
      "expected": [2, 1, 1, 0]
    },
    {
      "title": "Merge Intervals",
      "description": "Write a function that merges overlapping intervals in a list of intervals.",
      "test": [
        [
          [1, 3],
          [2, 6],
          [8, 10],
          [15, 18]
        ],
        null
      ],
      "expected": [
        [1, 6],
        [8, 10],
        [15, 18]
      ]
    },
    {
      "title": "Distinct Subsequences",
      "description": "Write a function that counts the number of distinct subsequences of a string in another string.",
      "test": ["rabbbit", "rabbit"],
      "expected": 3
    },
    {
      "title": "Longest Consecutive Sequence",
      "description": "Write a function that finds the length of the longest consecutive sequence in an unsorted array of integers.",
      "test": [[100, 4, 200, 1, 3, 2], null],
      "expected": 4
    },
    {
      "title": "N-Queens",
      "description": "Write a function that finds all distinct solutions to the N-Queens puzzle for a given integer N.",
      "test": [4, null],
      "expected": [
        [".Q..", "...Q", "Q...", "..Q."],
        ["..Q.", "Q...", "...Q", ".Q.."]
      ]
    },
    {
      "title": "Wildcard Matching",
      "description": "Implement wildcard pattern matching with support for '?' and '*'.",
      "test": ["aa", "a*", null],
      "expected": false
    },
    {
      "title": "Minimum Window Subsequence",
      "description": "Write a function that finds the minimum window in a string S, which will contain all the characters in string T in complexity O(n).",
      "test": ["abcdebdde", "bde", null],
      "expected": "bcde"
    },
    {
      "title": "Remove Invalid Parentheses",
      "description": "Write a function that removes the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.",
      "test": ["()())()", null],
      "expected": ["(())()", "()()()"]
    },
    {
      "title": "Count of Range Sum",
      "description": "Write a function that given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.",
      "test": [[-2, 5, -1], [-2, 2], null],
      "expected": 3
    },
    {
      "title": "Create Maximum Number",
      "description": "Write a function that given two arrays of length m and n, create the maximum number of length k (k <= m + n) from digits of the two arrays.",
      "test": [[3, 4, 6, 5], [9, 1, 2, 5, 8, 3], 5],
      "expected": [9, 8, 6, 5, 3]
    },
    {
      "title": "Word Break II",
      "description": "Write a function that given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word.",
      "test": ["catsanddog", ["cat", "cats", "and", "sand", "dog"], null],
      "expected": ["cats and dog", "cat sand dog"]
    },
    {
      "title": "Largest Rectangle in Histogram",
      "description": "Write a function that given an array of heights of buildings, finds the area of the largest rectangle that can be formed by the given heights.",
      "test": [[2, 1, 5, 6, 2, 3], null],
      "expected": 10
    },
    {
      "title": "Maximal Rectangle",
      "description": "Write a function that given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
      "test": [
        [
          ["1", "0", "1", "0", "0"],
          ["1", "0", "1", "1", "1"],
          ["1", "1", "1", "1", "1"],
          ["1", "0", "0", "1", "0"]
        ],
        null
      ],
      "expected": 6
    }
  ]
}
